import faiss, torch, numpy as np
import os
torch.serialization.add_safe_globals([torch.nn.modules.sparse.Embedding]) # Not needed if just loading weights
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

loaded = torch.load("../artifacts/item_emb.pt", map_location="cpu")

if isinstance(loaded, torch.nn.Embedding):
    emb_tensor = loaded.weight.detach()
else:
    emb_tensor = loaded.detach()

item_vec = emb_tensor.cpu().numpy().astype("float32")

faiss.normalize_L2(item_vec)
index = faiss.IndexFlatIP(item_vec.shape[1])
index.add(item_vec)

faiss.write_index(index, "../artifacts/recall.index")
print("Faiss index saved to artifacts/recall.index")
print(f"Ensure movie_ids.npy was generated by train_tower.py and has length {len(item_vec)}")